   1 0000               #
   2 0000               # @author Brendan Kapp (bek7883)
   3 0000               #
   4 0000               # This file handles all the grid management (get, set, create, close, etc.)
   5 0000               # Grid values are as follows:
   6 0000               # 0 = null
   7 0000               # 1 = grass
   8 0000               # 2 = tree
   9 0000               # 3 = burning tree
  10 0000               #
  11 0000               
  12 0000               #
  13 0000               # DATA
  14 0000               #
  15 0000               	.data
  16 0000               	.align	2
  17 0000               grid_data:	
  18 0000 00000000		.word	0:1024
     0004 00000000
     0008 00000000
     000c 00000000
     0010 00000000
     0014 00000000
  19 1000               grid_data_old:
  20 1000 00000000		.word	0:1024
     1004 00000000
     1008 00000000
     100c 00000000
     1010 00000000
     1014 00000000
  21 2000               #
  22 2000               # CODE
  23 2000               #	
  24 0000               	.text
  25 0000               	.align	2
  26 0000               	.globl	grid_create
  27 0000               	.globl	grid_get
  28 0000               	.globl	grid_set
  29 0000               	.globl	grid_cycle
  30 0000               #
  31 0000               # assigns 0's to the entire grid of memory to be used
  32 0000               # grid builds from the top left outwards but always uses a 32x32 grid
  33 0000               # this enables the movement vertically to be done by +/- 32
  34 0000               # to move horizontally +/- 1
  35 0000               # parameters: a0 (x size), a1 (y size)
  36 0000               # returns: grid address
  37 0000               #
  38 0000               grid_create:
  39 0000 3C020000		la	$v0, grid_data
     0004 34420000
  40 0008 03E00008		jr	$ra
  41 000c               #
  42 000c               # grid_get will return the value at (a0, a1)
  43 000c               # parameters: a0 (x location), a1 (y location)
  44 000c               # returns: v0 (returns value, 0 for fail)
  45 000c               #
  46 000c               grid_get:
  47 000c 3C080000		la	$t0, grid_data
     0010 35080000
  48 0014               						# to retrieve a value:
  49 0014               						#  mem = 32 * y + x
  50 0014 34010020		mul	$t1, $a1, 32
     0018 00A10018
     001c 00004812
  51 0020 01245020		add	$t2, $t1, $a0			# t2 is the offset
  52 0024 01485820		add	$t3, $t2, $t0			# t3 is the address 
  53 0028               
  54 0028 8D620000		lw	$v0, 0($t3)
  55 002c               	
  56 002c 03E00008		jr	$ra
  57 0030               #
  58 0030               # grid_set will set the value at (a0, a1)
  59 0030               # parameters: a0 (x location), a1 (y location), a2 (value)
  60 0030               # returns: none
  61 0030               #
  62 0030               grid_set:
  63 0030 3C080000		la	$t0, grid_data
     0034 35080000
  64 0038               						# to retrieve a value:
  65 0038               						#  mem = 32 * y + x
  66 0038 34010020		mul	$t1, $a1, 32
     003c 00A10018
     0040 00004812
  67 0044 01245020		add	$t2, $t1, $a0			# t2 is the offset
  68 0048 01485820		add	$t3, $t2, $t0			# t3 is the address 
  69 004c               
  70 004c AD660000		sw	$a2, 0($t3)	
  71 0050               		
  72 0050 03E00008		jr	$ra
  73 0054               
  74 0054               #
  75 0054               # grid_cycle will copy the current data in grid into grid old
  76 0054               # this must be done for each cycle of the simulation
  77 0054               # this routine will copy the entirety of the 32x32 grid
  78 0054               # parameters: none
  79 0054               # returns: none
  80 0054               #
  81 0054               grid_cycle:
  82 0054 34080000		li	$t0, 0			# x
  83 0058 34090000		li	$t1, 0			# y
  84 005c 3C0A0000		la	$t2, grid_data		# used to access the memory addressses
     0060 354A0000
  85 0064 3C0B0000		la	$t3, grid_data_old	# used to access the memory addresses
     0068 356B0000
  86 006c 340C0020		li	$t4, 32
  87 0070               outer_cycle:
  88 0070 21290001		addi	$t1, $t1, 1
  89 0074               inner_cycle:
  90 0074 214A0004		addi	$t2, $t2, 4
  91 0078 216B0004		addi	$t3, $t3, 4
  92 007c 21080001		addi	$t0, $t0, 1
  93 0080 110CFFFB		beq	$t0, $t4, outer_cycle
  94 0084 0800001D		j	inner_cycle	
  95 0088               finish_cycle:
  96 0088 03E00008		jr	$ra


finish_cycle     00000088 R  text 
grid_create      00000000 RG text 
grid_cycle       00000054 RG text 
grid_data        00000000 R  data 
grid_data_old    00001000 R  data 
grid_get         0000000C RG text 
grid_set         00000030 RG text 
inner_cycle      00000074 R  text 
outer_cycle      00000070 R  text 
